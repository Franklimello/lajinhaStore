const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);

// Configurar CORS para permitir qualquer origem
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Armazenamento em memรณria (sem banco de dados)
let onlineUsers = 0;
let messageHistory = []; // Histรณrico temporรกrio (limpa ao reiniciar)

// Socket.IO - Gerenciamento de conexรตes
io.on('connection', (socket) => {
  onlineUsers++;
  console.log(`โ Novo usuรกrio conectado! Total online: ${onlineUsers}`);
  
  // Enviar contagem de usuรกrios para todos
  io.emit('userCount', onlineUsers);
  
  // Enviar histรณrico de mensagens recentes (รบltimas 50)
  socket.emit('messageHistory', messageHistory.slice(-50));

  // Receber nova mensagem
  socket.on('chatMessage', (data) => {
    const message = {
      id: Date.now() + Math.random(),
      text: data.text,
      username: data.username || 'Anรดnimo',
      timestamp: new Date().toISOString(),
      isSupport: data.isSupport || false
    };
    
    // Adicionar ao histรณrico
    messageHistory.push(message);
    
    // Manter apenas รบltimas 100 mensagens
    if (messageHistory.length > 100) {
      messageHistory = messageHistory.slice(-100);
    }
    
    console.log(`๐ฌ Mensagem de ${message.username}: ${message.text}`);
    
    // Broadcast para todos os clientes
    io.emit('chatMessage', message);
  });

  // Usuรกrio estรก digitando
  socket.on('typing', (username) => {
    socket.broadcast.emit('typing', username);
  });

  // Parou de digitar
  socket.on('stopTyping', () => {
    socket.broadcast.emit('stopTyping');
  });

  // Desconexรฃo
  socket.on('disconnect', () => {
    onlineUsers--;
    console.log(`โ Usuรกrio desconectado. Total online: ${onlineUsers}`);
    io.emit('userCount', onlineUsers);
  });
});

// Rota de status
app.get('/api/status', (req, res) => {
  res.json({
    status: 'online',
    onlineUsers,
    totalMessages: messageHistory.length,
    serverTime: new Date().toISOString()
  });
});

// Rota para limpar histรณrico (apenas para admin)
app.post('/api/clear-history', (req, res) => {
  messageHistory = [];
  io.emit('historyCleared');
  res.json({ success: true, message: 'Histรณrico limpo' });
});

// Porta do servidor
const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  console.log(`
  โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
  โ   ๐ SERVIDOR DE CHAT EM TEMPO REAL       โ
  โ                                            โ
  โ   ๐ก Socket.IO ativo                       โ
  โ   ๐ Servidor rodando na porta ${PORT}       โ
  โ   โ CORS habilitado para todas origens    โ
  โ                                            โ
  โ   Acesse: http://localhost:${PORT}          โ
  โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
  `);
});

