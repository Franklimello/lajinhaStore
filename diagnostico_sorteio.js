/**
 * üîç DIAGN√ìSTICO DO SISTEMA DE SORTEIO
 * 
 * Script para investigar por que um cliente com 12 cervejas n√£o foi registrado no sorteio
 * 
 * Como usar:
 * 1. Abra o console do navegador (F12)
 * 2. Cole este c√≥digo
 * 3. Execute: diagnosticoSorteio()
 */

// Importar as fun√ß√µes necess√°rias (se estiver no contexto da aplica√ß√£o)
// Se n√£o estiver, voc√™ pode executar este c√≥digo diretamente no console

async function diagnosticoSorteio() {
  console.log('üîç INICIANDO DIAGN√ìSTICO DO SISTEMA DE SORTEIO');
  console.log('================================================');
  
  try {
    // 1. Verificar se a promo√ß√£o est√° ativa
    console.log('\n1Ô∏è‚É£ VERIFICANDO STATUS DA PROMO√á√ÉO...');
    const promocaoAtiva = await isPromocaoAtiva();
    console.log(`Status da promo√ß√£o: ${promocaoAtiva ? '‚úÖ ATIVA' : '‚ùå PAUSADA'}`);
    
    if (!promocaoAtiva) {
      console.log('üö® PROBLEMA ENCONTRADO: Promo√ß√£o est√° pausada!');
      console.log('üí° SOLU√á√ÉO: Ative a promo√ß√£o no painel admin (/sorteio)');
      return;
    }
    
    // 2. Verificar participantes atuais
    console.log('\n2Ô∏è‚É£ VERIFICANDO PARTICIPANTES ATUAIS...');
    const participantes = await getSorteioData();
    console.log(`Total de participantes: ${participantes.length}`);
    
    if (participantes.length > 0) {
      console.log('√öltimos 3 participantes:');
      participantes.slice(0, 3).forEach((p, i) => {
        console.log(`  ${i+1}. ${p.clientName} - Pedido #${p.orderNumber} - ${p.totalItems} itens`);
      });
    }
    
    // 3. Simular teste com 12 cervejas
    console.log('\n3Ô∏è‚É£ SIMULANDO TESTE COM 12 CERVEJAS...');
    const testePedido = {
      orderNumber: `TESTE-${Date.now()}`,
      clientName: 'Cliente Teste',
      clientPhone: '11999999999',
      totalItems: 12, // 12 cervejas
      totalValue: 120.00
    };
    
    console.log('Dados do teste:', testePedido);
    
    const resultado = await addSorteioData(testePedido);
    console.log('Resultado do teste:', resultado);
    
    if (resultado.success) {
      console.log('‚úÖ TESTE PASSOU: Sistema funcionando corretamente');
      console.log('üí° POSS√çVEIS CAUSAS do problema original:');
      console.log('   - Promo√ß√£o estava pausada no momento do pedido');
      console.log('   - Erro de conex√£o durante o checkout');
      console.log('   - Pedido j√° existia (duplicata)');
      console.log('   - Erro no processo de checkout');
    } else {
      console.log('‚ùå TESTE FALHOU:', resultado.message);
      console.log('üîç Motivo espec√≠fico:', resultado);
    }
    
    // 4. Verificar logs de erro
    console.log('\n4Ô∏è‚É£ VERIFICANDO LOGS DE ERRO...');
    console.log('Verifique o console do navegador durante o checkout para erros como:');
    console.log('   - "‚ùå Erro ao adicionar ao sorteio"');
    console.log('   - "‚ö†Ô∏è Pedido n√£o eleg√≠vel para sorteio"');
    console.log('   - "‚è∏Ô∏è Promo√ß√£o pausada"');
    console.log('   - "üö® ALERTA: poss√≠vel loop detectado"');
    
    // 5. Recomenda√ß√µes
    console.log('\n5Ô∏è‚É£ RECOMENDA√á√ïES:');
    console.log('   ‚úÖ Verifique se a promo√ß√£o est√° ativa');
    console.log('   ‚úÖ Teste com um novo pedido de 5+ itens');
    console.log('   ‚úÖ Verifique os logs do console durante o checkout');
    console.log('   ‚úÖ Acesse /sorteio para ver participantes atuais');
    
  } catch (error) {
    console.error('‚ùå ERRO NO DIAGN√ìSTICO:', error);
    console.log('üí° Verifique se voc√™ est√° executando no contexto da aplica√ß√£o');
  }
}

// Fun√ß√£o para testar manualmente um pedido
async function testarPedidoSorteio(dadosPedido) {
  console.log('üß™ TESTANDO PEDIDO NO SORTEIO...');
  console.log('Dados:', dadosPedido);
  
  try {
    const resultado = await addSorteioData(dadosPedido);
    console.log('Resultado:', resultado);
    return resultado;
  } catch (error) {
    console.error('Erro no teste:', error);
    return { success: false, error: error.message };
  }
}

// Exemplo de uso:
// testarPedidoSorteio({
//   orderNumber: 'PEDIDO-123',
//   clientName: 'Jo√£o Silva',
//   clientPhone: '11999999999',
//   totalItems: 12,
//   totalValue: 120.00
// });

console.log('üîç DIAGN√ìSTICO CARREGADO!');
console.log('Execute: diagnosticoSorteio() para iniciar o diagn√≥stico');
console.log('Execute: testarPedidoSorteio(dados) para testar um pedido espec√≠fico');


