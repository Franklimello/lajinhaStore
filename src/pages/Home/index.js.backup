import React, { useState, useEffect, useMemo, useCallback, Suspense, lazy } from 'react';
import SEO from '../../components/SEO';
import { useWebViewOptimization } from '../../hooks/useWebViewOptimization';
import WebViewFallback from '../../components/WebViewFallback';
import { useDebouncedValue } from '../../hooks/useDebouncedValue';
import { useOptimizedProducts } from '../../hooks/useOptimizedProducts';

// Componentes lazy-loaded para melhor performance
const HeroSection = lazy(() => import('../../components/Home/HeroSection'));
const SearchBar = lazy(() => import('../../components/Home/SearchBar'));
const CategoriesGrid = lazy(() => import('../../components/Home/CategoriesGrid'));
const OffersSection = lazy(() => import('../../components/Home/OffersSection'));
const SearchResults = lazy(() => import('../../components/Home/SearchResults'));
const LazyCategorySection = lazy(() => import('../../components/Home/LazyCategorySection'));
const ScrollToTopButton = lazy(() => import('../../components/Home/ScrollToTopButton'));

/**
 * Home - Página principal otimizada e modular
 * 
 * PRINCIPAIS MELHORIAS:
 * - Componentes lazy-loaded para reduzir bundle inicial
 * - Intersection Observer para carregar categorias sob demanda
 * - Cache local com sessionStorage
 * - Paginação Firestore otimizada
 * - Memoização para evitar re-renderizações
 * - SEO otimizado com JSON-LD
 */
export default function Home() {
  useWebViewOptimization();
  
  // Estados otimizados
  const [termo, setTermo] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  
  // Debounce para busca
  const debouncedTerm = useDebouncedValue(termo, 350);
  
  // Hook otimizado para produtos
  const { 
    products: searchResults, 
    loading: searchLoading 
  } = useOptimizedProducts(debouncedTerm, selectedCategory, 20);

  // Filtra produtos localmente para melhor performance
  const filteredProducts = useMemo(() => {
    if (!debouncedTerm.trim()) return [];
    
    return searchResults.filter(product => 
      product.titulo.toLowerCase().includes(debouncedTerm.toLowerCase())
    );
  }, [searchResults, debouncedTerm]);

  // Função para limpar busca
  const handleClearSearch = useCallback(() => {
    setTermo("");
    setSelectedCategory("");
  }, []);

  // Função para navegar para categoria
  const handleCategoryClick = useCallback((categoryName) => {
    const element = document.getElementById(`category-${categoryName}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }, []);

  // Dados estruturados para SEO
  const structuredData = useMemo(() => ({
    "@context": "https://schema.org",
    "@type": "Store",
    "name": "Supermercado Online Lajinha",
    "alternateName": "CompreAqui",
    "description": "Supermercado online completo em Lajinha-MG com produtos frescos, bebidas geladas, limpeza, higiene pessoal e muito mais. Entrega rápida e preços competitivos.",
    "url": "https://compreaqui.com.br",
    "logo": "https://compreaqui.com.br/logo512.png",
    "image": "https://compreaqui.com.br/logo512.png",
    "telephone": "+55-19-99705-0303",
    "address": {
      "@type": "PostalAddress",
      "addressLocality": "Lajinha",
      "addressRegion": "MG",
      "addressCountry": "BR"
    },
    "openingHours": "Mo-Su 08:00-18:00",
    "paymentAccepted": "PIX, Dinheiro",
    "currenciesAccepted": "BRL",
    "priceRange": "$$",
    "hasOfferCatalog": {
      "@type": "OfferCatalog",
      "name": "Produtos Supermercado Online Lajinha",
      "itemListElement": [
        {
          "@type": "Offer",
          "itemOffered": {
            "@type": "Product",
            "name": "Produtos Frescos"
          }
        },
        {
          "@type": "Offer", 
          "itemOffered": {
            "@type": "Product",
            "name": "Bebidas"
          }
        },
        {
          "@type": "Offer",
          "itemOffered": {
            "@type": "Product", 
            "name": "Produtos de Limpeza"
          }
        }
      ]
    }
  }), []);

  // Lista de categorias para lazy loading
  const categories = useMemo(() => [
    'Mercearia',
    'Limpeza', 
    'Frios e laticínios',
    'Guloseimas e snacks',
    'Bebidas',
    'Bebidas Geladas',
    'Higiene pessoal',
    'Farmácia',
    'Utilidades domésticas',
    'Pet shop',
    'Infantil',
    'Hortifruti',
    'Açougue'
  ], []);

  return (
    <>
      <SEO
        title="Supermercado Online Lajinha - Sua Loja Completa"
        description="Supermercado Online Lajinha é sua loja completa com produtos frescos, bebidas geladas, limpeza, higiene pessoal e muito mais. Entrega rápida em Lajinha-MG e preços competitivos. Faça suas compras online com segurança!"
        keywords="supermercado online Lajinha, loja online Lajinha, produtos frescos Lajinha, bebidas geladas Lajinha, limpeza Lajinha, higiene pessoal Lajinha, entrega rápida Lajinha MG, compras online Lajinha, PIX Lajinha, pagamento seguro Lajinha"
        url="/"
        structuredData={structuredData}
      />
      
      <WebViewFallback>
        <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-100">
          
          {/* Hero Section - Lazy loaded */}
          <Suspense fallback={
            <div className="h-64 bg-gradient-to-r from-blue-600 to-purple-600 animate-pulse"></div>
          }>
            <HeroSection />
          </Suspense>

          {/* Search Bar - Lazy loaded */}
          <Suspense fallback={
            <div className="container mx-auto px-4 py-16">
              <div className="h-20 bg-gray-200 rounded-3xl animate-pulse"></div>
            </div>
          }>
            <SearchBar 
              termo={termo} 
              setTermo={setTermo} 
              onClearSearch={handleClearSearch} 
            />
          </Suspense>

          {/* Grid de Categorias - Só aparece quando não há busca */}
          {!termo.trim() && (
            <Suspense fallback={
              <div className="container mx-auto px-4 pb-8">
                <div className="bg-white rounded-3xl shadow-lg p-6">
                  <div className="animate-pulse">
                    <div className="h-8 bg-gray-200 rounded w-1/3 mx-auto mb-6"></div>
                    <div className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3">
                      {[...Array(12)].map((_, i) => (
                        <div key={i} className="h-24 bg-gray-200 rounded-2xl"></div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            }>
              <CategoriesGrid onCategoryClick={handleCategoryClick} />
            </Suspense>
          )}

          {/* Ofertas do Dia - Só aparece quando não há busca */}
          {!termo.trim() && (
            <Suspense fallback={
              <div className="container mx-auto px-4 pb-8">
                <div className="h-32 bg-gradient-to-r from-red-500 to-orange-500 rounded-3xl animate-pulse"></div>
              </div>
            }>
              <OffersSection />
            </Suspense>
          )}

          {/* Resultados da Busca ou Categorias */}
          {termo.trim() ? (
            <Suspense fallback={
              <div className="container mx-auto px-4 pb-12">
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                  {[...Array(10)].map((_, i) => (
                    <div key={i} className="bg-white rounded-2xl shadow-lg overflow-hidden animate-pulse">
                      <div className="h-48 bg-gray-200"></div>
                      <div className="p-4 space-y-3">
                        <div className="h-6 bg-gray-200 rounded"></div>
                        <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                        <div className="h-8 bg-gray-200 rounded w-1/2"></div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            }>
              <SearchResults 
                filteredProducts={filteredProducts}
                loading={searchLoading}
                onAddToCart={handleClearSearch}
              />
            </Suspense>
          ) : (
            /* Categorias Lazy-loaded com Intersection Observer */
            <div className="container mx-auto pb-4 space-y-10">
              {categories.map((categoryName) => (
                <LazyCategorySection
                  key={categoryName}
                  categoryName={categoryName}
                  searchTerm={termo}
                />
              ))}
            </div>
          )}
          
          {/* Botão Voltar ao Topo - Lazy loaded */}
          <Suspense fallback={null}>
            <ScrollToTopButton />
          </Suspense>
        </div>
      </WebViewFallback>
    </>
  );
}